#!/usr/bin/env bash

#
# Generated from bin/bpr.bps on 2024-09-19T14:52:34.398520-04:00[America/New_York] (timestamp 1726771954398)
#
# strict mode header
set -eEuo pipefail -o posix
declare -x IFS=$'\n\t'
declare -i s
trap 's=$?; echo "Error (exit code $s) found on line $LINENO.  Command was: $BASH_COMMAND"; exit $s' ERR
source ${BASHPILE_HOME:=.}/bin/stdlib || source ${BASHPILE_HOME:=.}/stdlib
# expression statement, Bashpile line 8
assertGnuGetopt
# assign statement, Bashpile line 11
declare opts
opts=$(getopt -o co: --long command,outputFile: -n 'Bashpile Runner' -- "$@")
eval set -- "$opts"
# assign statement, Bashpile line 13
declare translatedFilename
translatedFilename="command.bpt"
# assign statement, Bashpile line 14
declare commandMode
commandMode=false
# while statement, Bashpile line 15
while true; do
  # switch statement, Bashpile line 16
  case $1 in
    -c | --command)
      # reassign statement, Bashpile line 18
      commandMode=true
      shift
      ;;
    -o | --outputFile)
      # reassign statement, Bashpile line 21
      translatedFilename=$2
      shift 2
      ;;
    "--")
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done
if [ -n "${1+default}" ] && [ "$1" == "-" ]; then
  # reassign statement, Bashpile line 31
  commandMode=true
  shift
fi
# assign statement, Bashpile line 35
declare jarPath
jarPath="$(dirname "${BASH_SOURCE[0]}")/bashpile.jar"
if ! ${commandMode} && [ -z "${1+default}" ]; then
  trap - ERR
  java -jar "$jarPath"
  exit $?
fi
set +u
# function forward declaration, Bashpile line 45
# function declaration, Bashpile line 88
runTranslation() {
  declare -r translatedFilename=$1
  declare -x IFS=$' '
  read -r -a args <<<"$2"
  declare -x IFS=$'\n\t'
  # assign statement, Bashpile line 90
  declare absoluteFilename
  absoluteFilename=$(realpath "$translatedFilename")
  chmod 755 $absoluteFilename
  # assign statement, Bashpile line 93
  declare LOG_NAME
  LOG_NAME=$(mktemp -t bpr.log)
  # expression statement, Bashpile line 94
  "$absoluteFilename" "${args[@]}" 2>&1 | tee "$LOG_NAME"
  if cat "$LOG_NAME" | grep -E 'unexpected EOF|syntax error|command not found' >/dev/null 2>&1; then
    # expression statement, Bashpile line 97
    "$absoluteFilename" "${args[@]}"
  fi
  rm $absoluteFilename 2>/dev/null || true
}
if ! ${commandMode}; then
  if [ "${translatedFilename}" == "command.bpt" ]; then
    # reassign statement, Bashpile line 50
    translatedFilename=$1.bpt
    if [ -e "${translatedFilename}" ]; then
      # print statement, Bashpile line 52
      printf -- "Will not overwrite ${translatedFilename}\n"
      exit 1
    fi
  fi
  java -jar "$jarPath" --outputFile="$translatedFilename" "$1" >bp_jar.log 2>&1 || true
  if [ -f "${translatedFilename}" ]; then
    rm bp_jar.log
    shift
    # print statement, Bashpile line 58
    printf -- "Start of ${translatedFilename}\n"
    # expression statement, Bashpile line 59
    runTranslation "${translatedFilename}" "$@"
  else
    # print statement, Bashpile line 61
    printf -- "Compile failed\n"
    cat bp_jar.log
    rm bp_jar.log
    exit 1
  fi
else
  # assign statement, Bashpile line 67
  declare commandString
  if [ -n "${1+default}" ]; then
    # reassign statement, Bashpile line 69
    commandString=$1
    shift
  else
    # reassign statement, Bashpile line 72
    commandString=$(cat -)
  fi
  java -jar "$jarPath" --outputFile="$translatedFilename" -c "$commandString" >bp_jar.log 2>&1 || true
  if [ -f "${translatedFilename}" ]; then
    rm bp_jar.log
    sleep .2
    # expression statement, Bashpile line 78
    runTranslation "${translatedFilename}" "$@"
  else
    # print statement, Bashpile line 80
    printf -- "Compile failed\n"
    cat bp_jar.log
    rm bp_jar.log
    exit 1
  fi
fi
