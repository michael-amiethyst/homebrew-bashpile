#!/usr/bin/env bash

#
# Generated from bin/bpr.bps on 2024-04-08T15:06:30.984601575-07:00[America/Los_Angeles] (timestamp 1712613990984)
#
# strict mode header
set -eEuo pipefail -o posix
declare -x IFS=$'\n\t'
declare -i s
trap 's=$?; echo "Error (exit code $s) found on line $LINENO.  Command was: $BASH_COMMAND"; exit $s' ERR
# assign statement, Bashpile line 8
declare opts
opts=$(getopt -o co: --long command,outputFile: -n 'Bashpile Runner' -- "$@")
eval set -- "$opts"
# assign statement, Bashpile line 10
declare translatedFilename
translatedFilename="command.bpt"
# assign statement, Bashpile line 11
declare commandMode
commandMode=false
# while statement, Bashpile line 12
while true; do
  # switch statement, Bashpile line 13
  case $1 in
    -c | --command)
      # reassign statement, Bashpile line 15
      commandMode=true
      shift
      ;;
    -o | --outputFile)
      # reassign statement, Bashpile line 18
      translatedFilename=$2
      shift 2
      ;;
    "--")
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done
# assign statement, Bashpile line 27
declare jarPath
jarPath="$(dirname "${BASH_SOURCE[0]}")/bashpile.jar"
if ! ${commandMode} && [ -z "${1+default}" ]; then
  trap - ERR
  java -jar "$jarPath"
  exit $?
fi
set +u
# function forward declaration, Bashpile line 37
# function declaration, Bashpile line 66
runTranslation() {
  declare -r translatedFilename=$1
  declare -x IFS=$' '
  read -r -a args <<<"$2"
  declare -x IFS=$'\n\t'
  chmod 755 $translatedFilename
  # creates statement, Bashpile line 68
  if (
    set -o noclobber
    ./"$translatedFilename" "${args[@]}" 2>&1 | tee "bpr.log"
  ) 2>/dev/null; then
    trap 'rm -f bpr.log; exit 10' INT TERM EXIT
    ## wrapped body of creates statement
    if cat bpr.log | grep -E 'unexpected EOF|syntax error|command not found' >/dev/null 2>&1; then
      # expression statement, Bashpile line 72
      ./"$translatedFilename" "${args[@]}"
    fi
    ## end of wrapped body of creates statement
    rm -f bpr.log
    trap - INT TERM EXIT
  else
    printf "Failed to create bpr.log correctly, script output was:\n"
    cat bpr.log
    rm -f bpr.log
    return 1
  fi
  declare -i __bp_exitCode=$?
  if [ "$__bp_exitCode" -ne 0 ]; then exit "$__bp_exitCode"; fi
}
if ! ${commandMode}; then
  if [ "${translatedFilename}" == "command.bpt" ]; then
    # reassign statement, Bashpile line 42
    translatedFilename=$1.bpt
    if [ -e "${translatedFilename}" ]; then
      # print statement, Bashpile line 44
      printf "Will not overwrite ${translatedFilename}\n"
      exit 1
    fi
  fi
  # creates statement, Bashpile line 46
  if (
    set -o noclobber
    java -jar "$jarPath" --outputFile="$translatedFilename" "$1"
  ) 2>/dev/null; then
    trap 'rm -f "$translatedFilename"; exit 10' INT TERM EXIT
    ## wrapped body of creates statement
    shift
    # print statement, Bashpile line 48
    printf "Start of ${translatedFilename}\n"
    # expression statement, Bashpile line 49
    runTranslation "${translatedFilename}" "$@"
    ## end of wrapped body of creates statement
    rm -f "$translatedFilename"
    trap - INT TERM EXIT
  else
    printf "Failed to create translatedFilename correctly, script output was:\n"
    cat "$translatedFilename"
    rm -f "$translatedFilename"
    exit 1
  fi
  declare -i __bp_exitCode=$?
  if [ "$__bp_exitCode" -ne 0 ]; then exit "$__bp_exitCode"; fi
else
  # assign statement, Bashpile line 52
  declare commandString
  if [ -n "${1+default}" ]; then
    # reassign statement, Bashpile line 54
    commandString=$1
    shift
  else
    # reassign statement, Bashpile line 57
    commandString=$(cat -)
  fi
  # creates statement, Bashpile line 58
  if (
    set -o noclobber
    java -jar "$jarPath" --outputFile="$translatedFilename" -c "$commandString" 1>/dev/null
  ) 2>/dev/null; then
    trap 'rm -f "$translatedFilename"; exit 10' INT TERM EXIT
    ## wrapped body of creates statement
    sleep .2
    # expression statement, Bashpile line 61
    runTranslation "${translatedFilename}" "$@"
    ## end of wrapped body of creates statement
    rm -f "$translatedFilename"
    trap - INT TERM EXIT
  else
    printf "Failed to create translatedFilename correctly, script output was:\n"
    cat "$translatedFilename"
    rm -f "$translatedFilename"
    exit 1
  fi
  declare -i __bp_exitCode=$?
  if [ "$__bp_exitCode" -ne 0 ]; then exit "$__bp_exitCode"; fi
fi
