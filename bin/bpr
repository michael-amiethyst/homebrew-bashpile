#!/usr/bin/env bash

#
# Generated from bin/bpr.bps on 2023-08-24T09:34:47.381616466-07:00[America/Los_Angeles] (timestamp 1692894887381)
#
# strict mode header
set -eEuo pipefail -o posix
export IFS=$'\n\t'
declare s
trap 's=$?; echo "Error (exit code $s) found on line $LINENO.  Command was: $BASH_COMMAND"; exit $s' ERR
if ! which brew > /dev/null 2>&1; then
    # expression statement, Bashpile line 8
    source /etc/bash.bashrc 2> /dev/null || true
fi
if ! which brew > /dev/null 2>&1; then
    # expression statement, Bashpile line 10
    source "$HOME"/.bashrc 2> /dev/null || true
fi
# assign statement, Bashpile line 13
export jarPath
jarPath=$(dirname "${BASH_SOURCE[0]}")/bashpile.jar
if [ -z "${1+default}" ]; then
    # expression statement, Bashpile line 17
    trap - ERR
    # expression statement, Bashpile line 18
    java -jar "$jarPath"
    # expression statement, Bashpile line 19
    exit $?
fi
# creates statement, Bashpile line 22
export  translatedFilename
if translatedFilename=$(set -o noclobber; java -jar "$jarPath" "$1" | tail --lines 1) 2> /dev/null; then
    trap 'rm -f "$translatedFilename"; exit 10' INT TERM EXIT
    ## wrapped body of creates statement
    # expression statement, Bashpile line 26
    sleep .2
    # expression statement, Bashpile line 27
    shift
    # print statement, Bashpile line 28
    printf "Start of ${translatedFilename}\n"
    # expression statement, Bashpile line 29
    chmod 755 $translatedFilename
    # creates statement, Bashpile line 31
    if (set -o noclobber; "$translatedFilename" "$@" 2>&1 | tee "bpr.log") 2> /dev/null; then
        trap 'rm -f "$translatedFilename" bpr.log; exit 10' INT TERM EXIT
        ## wrapped body of creates statement
        if cat bpr.log | grep 'unexpected EOF while looking for matching' > /dev/null 2>&1; then
            # expression statement, Bashpile line 33
            "$translatedFilename" "$@"
        fi
        ## end of wrapped body of creates statement
        rm -f bpr.log
        trap - INT TERM EXIT
    else
        printf "Failed to create pr.log correctly."
        rm -f bpr.log
        exit 1
    fi
    declare -i __bp_exitCode=$?
    if [ "$__bp_exitCode" -ne 0 ]; then exit "$__bp_exitCode"; fi
    ## end of wrapped body of creates statement
    rm -f "$translatedFilename"
    trap - INT TERM EXIT
else
    printf "Failed to create translatedFilename correctly.  Output from attempted creation:\n$translatedFilename"
    rm -f "$translatedFilename"
    exit 1
fi
declare -i __bp_exitCode=$?
if [ "$__bp_exitCode" -ne 0 ]; then exit "$__bp_exitCode"; fi
