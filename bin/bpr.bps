#!/usr/bin/env bpr

/**
 * Deployed with integration tests.
 * Manually deploy with `target/bpc --outputFile=target/bpr bin/bpr.bps`
 */

import "bashpile-stdlib"
assertGnuGetopt()

// getopt
opts: str = #(getopt -o co: --long command,outputFile: -n 'Bashpile Runner' -- "$@")
eval set -- "$opts"
// need to declare type for sourced method return
DEFAULT_OUTPUT_FILENAME: readonly str = createTempFile() :str
translatedFilename: str = DEFAULT_OUTPUT_FILENAME
commandMode: bool = false
while true:
    switch arguments[1]:
        case "-c" or "--command":
            commandMode = true
            shift
        case "-o" or "--outputFile":
            translatedFilename = arguments[2]
            shift 2
        case "--":
            shift
            break
        case "*":
            break

// case "-" not parsed with getopt in POSIX mode
if isset arguments[1] and arguments[1] == "-":
    commandMode = true
    shift

// get script directory and jar location
jarPath: str = #(dirname "${BASH_SOURCE[0]}") + "/bashpile.jar"
if not fileExists jarPath:
    jarPath = #(dirname "${BASH_SOURCE[0]}") + "/../target/bashpile.jar"

// if not enough arguments (commandMode may read from STDIN)
if not commandMode and unset arguments[1]:
    trap - ERR
    java -jar "$jarPath"
    exit $?

// allow for no additional args for 'arguments[all]' call
set +u
function runTranslation(translatedFilename: str, args: list<str>)

// last line of the jar's output is the generated Bash script
if not commandMode:
    if translatedFilename == DEFAULT_OUTPUT_FILENAME:
        translatedFilename = toBashpileOutputFile(arguments[1])
        if fileExists translatedFilename:
            print("Will not overwrite " + translatedFilename)
            exit 1
    java -jar "$jarPath" --outputFile="$translatedFilename" "$1" > bp_jar.log 2>&1 || true
    if regularFileExists translatedFilename:
        rm bp_jar.log
        shift
        print("Start of " + translatedFilename)
        runTranslation(translatedFilename, arguments[all])
    else:
        print("Compile failed")
        cat bp_jar.log
        rm bp_jar.log
        exit 1
else:
    // command mode
    commandString: str
    if isset arguments[1]:
        commandString = arguments[1]
        shift
    else:
        commandString = #(cat -)
    java -jar "$jarPath" --outputFile="$translatedFilename" -c "$commandString" > bp_jar.log 2>&1 || true
    if regularFileExists translatedFilename:
        rm bp_jar.log
        // let filesystem percolate to avoid 'No such file or directory' errors on calling our translatedFilename
        sleep .2
        runTranslation(translatedFilename, arguments[all])
    else:
        print("Compile failed")
        cat bp_jar.log
        rm bp_jar.log
        exit 1

// helpers

/** Occasional false positive for unexpected EOF or syntax error on WSL, rerun once if needed */
function runTranslation(translatedFilename: str, args: list<str>):
    // TODO remove .bps extension
    absoluteFilename: str = #(realpath "$translatedFilename")
    // Needed because we invoke the JAR directly and don't go through bpc (which sets permissions)
    chmod 755 $absoluteFilename
    LOG_NAME: readonly str = createTempFile("bpr.log") :str
    trap 'rm $absoluteFilename' ERR # in case running the generated script crashes
    #("$absoluteFilename" "${args[@]}" 2>&1 | tee "$LOG_NAME")
    if #(cat "$LOG_NAME" | grep -E 'unexpected EOF|syntax error|command not found' > /dev/null 2>&1):
        // this needs an explicit shell string to handle the ./"$absoluteFilename"
        #("$absoluteFilename" "${args[@]}")
    rm $absoluteFilename 2>/dev/null || true
