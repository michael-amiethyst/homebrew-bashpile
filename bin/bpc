#!/usr/bin/env bash

#
# Generated from bin/bpc.bps on 2024-07-03T12:40:44.189721-04:00[America/New_York] (timestamp 1720024844189)
#
# strict mode header
set -eEuo pipefail -o posix
declare -x IFS=$'\n\t'
declare -i s
trap 's=$?; echo "Error (exit code $s) found on line $LINENO.  Command was: $BASH_COMMAND"; exit $s' ERR
## unnest for $(getopt --help)
export __bp_subshellReturn0
__bp_subshellReturn0=$(getopt --help)
__bp_exitCode0=$?
if [ "$__bp_exitCode0" -ne 0 ]; then exit "$__bp_exitCode0"; fi
if [ "${__bp_subshellReturn0}" == " --" ]; then
  # print statement, Bashpile line 7
  printf "FreeBSD getopt found.  Please ensure that brew's gnu-getopt is first on the classpath.  Exiting...\n"
  exit 2
fi
# assign statement, Bashpile line 11
declare opts
opts=$(getopt -o co: --long command,outputFile: -n 'Bashpile Runner' -- "$@")
eval set -- "$opts"
# assign statement, Bashpile line 13
declare translatedFilename
translatedFilename="command.bpt"
# assign statement, Bashpile line 14
declare commandMode
commandMode=false
# while statement, Bashpile line 15
while true; do
  # switch statement, Bashpile line 16
  case $1 in
    -c | --command)
      # reassign statement, Bashpile line 18
      commandMode=true
      shift
      ;;
    -o | --outputFile)
      # reassign statement, Bashpile line 21
      translatedFilename=$2
      shift 2
      ;;
    "--")
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done
if [ -n "${1+default}" ] && [ "$1" == "-" ]; then
  # reassign statement, Bashpile line 31
  commandMode=true
  shift
fi
# assign statement, Bashpile line 35
declare bpHome
if [ -z "${BASHPILE_HOME+default}" ]; then
  # assign statement, Bashpile line 37
  declare bpWhere
  bpWhere=$(whereis bashpile | cut -d ' ' -f 2)
  # reassign statement, Bashpile line 38
  bpHome=$(dirname "$bpWhere")
else
  # assign statement, Bashpile line 40
  declare BASHPILE_HOME
  # reassign statement, Bashpile line 41
  bpHome=${BASHPILE_HOME}/bin
fi
# assign statement, Bashpile line 42
declare jarPath
jarPath="${bpHome}/bashpile.jar"
if ${commandMode}; then
  # assign statement, Bashpile line 45
  declare commandString
  commandString=$(cat -)
  # expression statement, Bashpile line 46
  java -jar "$jarPath" --outputFile="$translatedFilename" -c "$commandString"
else
  # expression statement, Bashpile line 48
  java -jar "$jarPath" --outputFile="$translatedFilename" "$@"
fi
chmod 755 $translatedFilename
