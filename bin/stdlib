#!/usr/bin/env bash

#
# Generated from bin/stdlib.bps on 2024-12-10T12:13:06.940701-05:00[America/New_York] (timestamp 1733850786940)
#
# strict mode header
set -eEuo pipefail -o posix
declare -x IFS=$'\n\t'
declare -i s
trap 's=$?; echo "Error (exit code $s) found on line $LINENO.  Command was: $BASH_COMMAND"; exit $s' ERR
# function declaration, Bashpile line 6
assertGnuGetopt() {
  # no parameters to function
  if [ "$(getopt --help)" == " --" ]; then
    # print statement, Bashpile line 8
    printf -- "FreeBSD getopt found.  Please ensure that brew's gnu-getopt is first on the classpath.  Exiting...\n"
    exit 2
  fi
}
# function declaration, Bashpile line 15
createTempFile() {
  set +u
  declare -r filename=$1
  set -u
  # assign statement, Bashpile line 16
  declare ret
  if [ -n "${filename+default}" ] && [ -n "${filename}" ]; then
    # reassign statement, Bashpile line 18
    ret=$(mktemp -t $filename)
  else
    # reassign statement, Bashpile line 20
    ret=$(mktemp)
  fi
  # return statement, Bashpile line 21
  printf -- "${ret}"
}
# function declaration, Bashpile line 23
toBashpileOutputFile() {
  set +u
  declare -r inFilename=$1
  set -u
  # assign statement, Bashpile line 25
  declare outFilename
  outFilename=$(printf -- "$inFilename" | gsed -E 's/\..[^.]?[^.]?[^.]?[^.]?$//g')
  if [ "${inFilename}" == "${outFilename}" ]; then
    # reassign statement, Bashpile line 28
    outFilename=${inFilename}.bash
  fi
  # return statement, Bashpile line 29
  printf -- "${outFilename}"
}
